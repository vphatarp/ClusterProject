/*
 * MulticastIO.cpp
 *
 *  Created on: Dec 21, 2017
 *      Author: eebo
 */
#include "MulticastIO.h"
#include <iostream>
namespace IO_Manager{


//Setting up the mcast socket
//End the program on failure
//Else print the success message
void MulticastIO::mcastSocket(){
	socketDescriptor = socket(AF_INET, SOCK_DGRAM, 0);
	if(socketDescriptor < 0)
	{
	  perror("Error opening Datagram Socket: ");
	  exit(1);
	}
	else{
		std::cout<< "Opened the datagram socket\n";
	}
}

//Since for the project multicast is going to be between nodes on the same machine
//All the nodes will be binding to the same address and hence the Reuse clause will be used
void MulticastIO::setReuse(){
	int reuse = 1;
	if(setsockopt(socketDescriptor, SOL_SOCKET, SO_REUSEADDR, (char *)&reuse, sizeof(reuse)) < 0){
		perror("Setting SO_REUSEADDR error");
		close(socketDescriptor);
		exit(1);
	}
	else{
		std::cout<<"Set reuse on the socket\n";
	}
}


//The below function binds the listening port to the multicast address
//Also specifies the source address of the traffic it is interested in
void MulticastIO::bindListeningPort(std::string mcastaddr, std::string localaddr){
	if(socketbound == false){
	memset((char *) &listeningSocket, 0, sizeof(listeningSocket));
	listeningSocket.sin_family = AF_INET;
	listeningSocket.sin_port = htons(4321);
	listeningSocket.sin_addr.s_addr = INADDR_ANY;

	if(bind(socketDescriptor, (struct sockaddr*)&listeningSocket, sizeof(listeningSocket))){
		perror("Error binding the Listening Port");
		close(socketDescriptor);
		exit(1);
	}
	else{
		std::cout<<"Listening socket successfully set\n";
		socketbound = true;
	}
	}

	list_mcastaddr.imr_multiaddr.s_addr = inet_addr(mcastaddr.c_str());
	list_mcastaddr.imr_interface.s_addr = inet_addr(localaddr.c_str());
	if(setsockopt(socketDescriptor, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char *)&list_mcastaddr, sizeof(list_mcastaddr)) < 0){
		perror("Adding multicast group error");
		close(socketDescriptor);
		exit(1);
	}
	else{
		std::cout<<"Listening to the multicast group.\n";
	}
}

void MulticastIO::bindSendingPort(std::string mcastaddr, std::string exitaddr){
	memset((char *) &dest_mcastaddr, 0, sizeof(dest_mcastaddr));
	dest_mcastaddr.sin_family = AF_INET;
	dest_mcastaddr.sin_addr.s_addr = inet_addr(mcastaddr.c_str());
	dest_mcastaddr.sin_port = htons(4321);

	exitInterface.s_addr = inet_addr(exitaddr.c_str());
	if(setsockopt(socketDescriptor, IPPROTO_IP, IP_MULTICAST_IF, (char *)&exitInterface, sizeof(exitInterface)) < 0){
	  perror("Setting local interface error");
	  exit(1);
	}
	else{
		std::cout<<"Local interface configured \n";
	}

}

bool MulticastIO::sendData(std::string message){
	if(sendto(socketDescriptor, message.c_str(), message.size()+1, 0, (struct sockaddr*)&dest_mcastaddr, sizeof(dest_mcastaddr)) < 0){
		perror("Sending datagram message error");
		return false;
	}
	else{
		std::cout<<"Sending datagram message...OK\n";
		sleep(20);
		return true;
	}
}

void MulticastIO::recvData(char* recvmsg, int length){
	if(read(socketDescriptor, recvmsg, length) < 0){
		perror("Reading datagram message error\n");
		close(socketDescriptor);
		exit(1);
	}
	else{
		std::cout<<"Reading datagram message from client...OK\n";
		std::cout<<"The message is: "<<recvmsg<<"\n";
	}
}

}


